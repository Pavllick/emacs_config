#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* Load external files
#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/lisp")
  (load "gud.el")
#+END_SRC

* Essential interface settings
#+BEGIN_SRC emacs-lisp

  (server-start)
  (menu-bar-mode t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode t)
  (setq initial-scratch-message "")
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-splash-screen t) ;; Prevent showing welcome screen
  (setq-default tab-width 2)

  (add-to-list 'default-frame-alist '(width . 117))
  (add-to-list 'default-frame-alist '(height . 69))

  (setq make-backup-files         nil) ; Don't want any backup files
  (setq auto-save-list-file-name  nil) ; Don't want any .saves files
  (setq auto-save-default         nil) ; Don't want any auto saving

  (setq show-paren-style 'expression)
  (show-paren-mode 2)


  (global-hl-line-mode t) ; Highlights the current cursor line
#+END_SRC

* Open files in same emacs frame
#+BEGIN_SRC emacs-lisp

  ;; Open GUI emacs from terminal in same frame
  (setq ns-pop-up-frames nil)
  ;; (x-focus-frame nil)

  ;; (require 'package)
  ;; (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      ;; (not (gnutls-available-p))))
         ;; (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    ;; (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    ;; (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      ;; (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
  ;; (package-initialize)

#+END_SRC

* Compilation commands
#+BEGIN_SRC emacs-lisp

  ;; Setup compile command for C++ mode
  (require 'compile)
  (add-hook 'c++-mode-hook
            (lambda ()
              (unless (file-exists-p "Makefile")
                (set (make-local-variable 'compile-command)
                     ;; emulate make's .c.o implicit pattern rule, but with
                     ;; different defaults for the CC, CPPFLAGS, and CFLAGS
                     ;; variables:
                     ;; $(CC) -c -o $@ $(CPPFLAGS) $(CFLAGS) $<
                     (let ((file (file-name-nondirectory buffer-file-name)))
                       (format "%s %s %s -o %s"
                               (or (getenv "CC") "g++")
                               (or (getenv "CFLAGS") "-std=c++11 -pedantic -Wall -g")
                               file
                               (file-name-sans-extension file)
                               ))))))
#+END_SRC

* Try
#+BEGIN_SRC emacs-lisp

  (use-package try
    :ensure t)
#+END_SRC
p
* Which key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t 
    :config
    (which-key-mode))
#+END_SRC

* Setup iedit, edit all occurrences of choosen word
#+BEGIN_SRC emacs-lisp

  (define-key global-map (kbd "C-c ;") 'iedit-mode)
#+END_SRC

* Auto complete
#+BEGIN_SRC emacs-lisp

  ;; auto complere configurations
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :config
  ;;   (require 'auto-complete-config))

  ;; == irony-mode ==
  (use-package irony
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    )

  (ac-config-default)
  ;; == company-mode ==
  (use-package company
    :init
    (global-company-mode)
    :config
    (setq company-idle-delay 0.4)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t)
    (define-key company-active-map [tab] 'company-select-next)

    (require 'color)
    (let ((bg (face-attribute 'default :background)))
      (custom-set-faces
      `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
      `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
      `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
      `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
      `(company-tooltip-common ((t (:inherit font-lock-constant-face)))))))

    ;; company-c-headers
    (use-package company-c-headers
      :ensure t)
    (add-to-list 'company-backends 'company-c-headers)

    (add-to-list 'company-c-headers-path-system "/Library/Developer/CommandLineTools/usr/include/c++/v1/")
    
    ;; config yasnippet
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))

    ;; C/C++ headers autocomplete
    (defun my:ac-c-header-init ()
      (require 'auto-complete-c-headers)
      (add-to-list 'ac-sources 'ac-source-c-headers)
      (add-to-list 'achead:include-directories '"/Library/Developer/CommandLineTools/usr/include
     /usr/include"))
    (add-hook 'c++-mode-hook 'my:ac-c-header-init)
    (add-hook 'c-mode-hook 'my:ac-c-header-init)
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp

  ;; Setup Flycheck
  (add-hook 'c++-mode-hook 'flycheck-mode)
  (add-hook 'c-mode-hook 'flycheck-mode)
  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
  (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
  (defun my-select-g++check-for-checker ()
    "Select g++-check for flycheck's checker."
    (flycheck-select-checker 'c/c++-gcc))

  (add-hook 'c-mode-hook #'my-select-g++check-for-checker)
  (add-hook 'c++-mode-hook #'my-select-g++check-for-checker)

  ;; Flycheck inline mode
  (use-package flycheck-inline
    :ensure t)
  (with-eval-after-load 'flycheck
    (flycheck-inline-mode))
  (use-package quick-peek
    :ensure t)
#+END_SRC

* Line numbers
#+BEGIN_SRC emacs-lisp

  (use-package nlinum
    :ensure t
    :config (global-nlinum-mode 0))

  ;; (global-display-line-numbers-mode)
  ;; (setq linum-format "%d ")
#+END_SRC

* IDO
#+BEGIN_SRC emacs-lisp

  (use-package ido
    :ensure t
    :bind (("C-x b" . ido-switch-buffer))
    :init
      (defun my-ido-keys ()
          "Add keybindings for ido"
          (define-key ido-completion-map [tab] 'ido-next-match))
      (add-hook 'ido-setup-hook #'my-ido-keys)
      :config
      (setq ido-enable-flex-matching t)
      (setq ido-everywhere t)
      (ido-mode 1))
  (use-package ido-complete-space-or-hyphen)
#+END_SRC

* Modeline, regexp and autocompletion
#+BEGIN_SRC emacs-lisp

  ;; Setup smex, M-x auto completion
  (use-package smex
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))

  (use-package visual-regexp
    :ensure t)
  (use-package visual-regexp-steroids
    :ensure t
    :config
    (define-key global-map (kbd "C-c r") 'vr/replace)
    (define-key global-map (kbd "C-c q") 'vr/query-replace)
    ;; if you use multiple-cursors, this is for you:
    (define-key global-map (kbd "C-c m") 'vr/mc-mark)
    ;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
    ;; (define-key global-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
    ;; (define-key global-map (kbd "C-s") 'vr/isearch-forward)) ;; C-M-s
    )

  ;; Replace modeline
  (use-package spaceline-config
    :ensure spaceline
    :pin melpa-stable
    :config
    (spaceline-emacs-theme))
#+END_SRC

* Swiper / Ivy / Counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :config
      (ivy-mode -1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))
  
  (use-package counsel
    :ensure t
    :bind
      (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
        ("M-y" . ivy-next-line)))

  (use-package swiper
    :ensure t
    :bind (
      ("C-s" . swiper)
      ("C-r" . swiper))
      ;; ("C-c C-r" . ivy-resume)
      ;; ("M-x" . counsel-M-x)
      ;; ("C-x C-f" . counsel-find-file))
    :config
      (progn
        (ivy-mode -1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

#+END_SRC

* Side bar
#+BEGIN_SRC emacs-lisp

  ;; ==== Side bar file managers ==== ;;
  ;; Add file tree
  (use-package neotree
    :ensure t
    :config
    (global-set-key (kbd "C-;") 'neotree-toggle))
  ;; File tree icons style
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))

  ;; http://www.emacswiki.org/emacs/SrSpeedbar
  ;; (require 'sr-speedbar)
  ;; (global-set-key (kbd "<f12>") 'sr-speedbar-toggle)
  ;; (setq speedbar-show-unknown-files t) ; show all files
  ;; (setq speedbar-use-images nil) ; use text for buttons
  ;; (setq sr-speedbar-right-side nil) ; put on left side
  ;; ==== Side bar file managers ==== ;;
#+END_SRC

* Buffer Selection
#+BEGIN_SRC emacs-lisp

  ;; (require 'bs)
  ;; (setq bs-configurations
  ;; '(("files" "^\\*scratch\\*" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)))
  ;; (global-set-key (kbd "<f2>") 'bs-show))
  (use-package bs
    :ensure t
    :bind ("<f2>" . bs-show)
    :config
    (setq bs-configurations
          '(("files" "^\\*scratch\\*" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last))))
#+END_SRC

* Buffer resize
#+BEGIN_SRC emacs-lisp
  
  (defun halve-other-window-height ()
    "Expand current window to use quarter of the other window's lines."
    (interactive)
    (enlarge-window (/ (window-height (next-window)) 4)))

  (global-set-key (kbd "C-c v") 'halve-other-window-height)
#+END_SRC

* Ruby packages

#+BEGIN_SRC emacs-lisp

  ;; (use-package rvm
    ;; :config (rvm-use-default))

  (use-package bundler
    :ensure t)
#+END_SRC

* Elixir packages
#+BEGIN_SRC emacs-lisp

  (use-package elixir-mode
     :ensure t)
     
  (use-package alchemist
     :ensure t)
     
#+END_SRC
* Keybindings remap
#+BEGIN_SRC emacs-lisp

  (setq mac-command-modifier 'meta)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
#+END_SRC

* Tramp for remote file editing
#+BEGIN_SRC emacs-lisp

  ;; M-x commads
  (defun sudo ()
    "Use TRAMP to `sudo' the current buffer"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
               buffer-file-name))))

#+END_SRC
* Org mode
** org init config
#+BEGIN_SRC emacs-lisp
  (local-set-key "\M-\C-g" 'org-plot/gnuplot)

  (use-package org 
    :ensure t
    :pin org)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/Sync/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)  
    "Advise capture-finalize to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

  (defadvice org-capture-destroy 
      (after delete-capture-frame activate)  
    "Advise capture-destroy to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))  

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
     (org-capture)))

                                          ; (require 'ox-beamer)
                                          ; for inserting inactive dates
  (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))

  (use-package htmlize :ensure t)

  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
  #+END_SRC
** org code execution config
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages '((C . t)))

  (org-babel-do-load-languages
  'org-babel-load-languages '((ruby . t)))

  (org-babel-do-load-languages
  'org-babel-load-languages '((gnuplot . t)))
#+END_SRC
* iBuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
                                          ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

#+END_SRC
* Ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp

    (use-package ace-window
    :ensure t
    :init
    (progn
    (setq aw-scope 'frame)
    (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 4.0))))) 
      ))
  #+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

  (use-package git-timemachine
    :ensure t)

#+END_SRC
