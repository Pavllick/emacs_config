#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* Load external files
#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/lisp")
  (load "gud.el")

#+END_SRC

* Keybindings remap
#+BEGIN_SRC emacs-lisp

  (setq mac-command-modifier 'meta)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key [remap dabbrev-expand] 'hippie-expand)

#+END_SRC
* Essential interface settings
#+BEGIN_SRC emacs-lisp

  (server-start)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  ;;(scroll-bar-mode -1)
  (if (display-graphic-p)
    (progn
      (tool-bar-mode -1)
      (scroll-bar-mode -1)))

  (show-paren-mode t)
  (setq initial-scratch-message "")
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-splash-screen t) ;; Prevent showing welcome screen
  (setq-default tab-width 2)

  (add-to-list 'default-frame-alist '(width . 117))
  (add-to-list 'default-frame-alist '(height . 69))

  (setq make-backup-files         nil) ; Don't want any backup files
  (setq auto-save-list-file-name  nil) ; Don't want any .saves files
  (setq auto-save-default         nil) ; Don't want any auto saving

  (setq show-paren-style 'expression)
  (show-paren-mode 2)

  (global-hl-line-mode t) ; Highlights the current cursor line

  (set-face-attribute 'default nil :height 100)

  ;; Theme
  (use-package darktooth-theme
    :ensure t
    :config
    (load-theme 'darktooth t))

#+END_SRC

* Modeline
#+BEGIN_SRC emacs-lisp

  ;; Replace modeline
  (use-package spaceline-config
    :ensure spaceline
    :pin melpa-stable
    :config
    (spaceline-emacs-theme))

#+END_SRC
* Open files in same emacs frame
#+BEGIN_SRC emacs-lisp

  ;; Open GUI emacs from terminal in same frame
  (setq ns-pop-up-frames nil)
  ;; (x-focus-frame nil)

#+END_SRC

* Compilation commands
#+BEGIN_SRC emacs-lisp

  ;; Setup compile command for C++ mode
  (require 'compile)
  (add-hook 'c++-mode-hook
            (lambda ()
              (unless (file-exists-p "Makefile")
                (set (make-local-variable 'compile-command)
                     ;; emulate make's .c.o implicit pattern rule, but with
                     ;; different defaults for the CC, CPPFLAGS, and CFLAGS
                     ;; variables:
                     ;; $(CC) -c -o $@ $(CPPFLAGS) $(CFLAGS) $<
                     (let ((file (file-name-nondirectory buffer-file-name)))
                       (format "%s %s %s -o %s"
                               (or (getenv "CC") "g++")
                               (or (getenv "CFLAGS") "-std=c++11 -pedantic -Wall -g")
                               file
                               (file-name-sans-extension file)
                               ))))))

#+END_SRC

* Try
#+BEGIN_SRC emacs-lisp

  (use-package try
    :ensure t)

#+END_SRC

* Which key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t 
    :config
    (which-key-mode))

#+END_SRC

* Setup iedit, edit all occurrences of choosen word
#+BEGIN_SRC emacs-lisp

  (use-package iedit
    :ensure t
    :config
    (define-key global-map (kbd "C-c ;") 'iedit-mode))

#+END_SRC

* Auto complete
#+BEGIN_SRC emacs-lisp

  ;; auto complere configurations
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :config
  ;;   (require 'auto-complete-config))

  ;; == irony-mode ==
  (use-package irony
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    )

  (ac-config-default)
  ;; == company-mode ==
  (use-package company
    :init
    (global-company-mode)
    :config
    (setq company-idle-delay 0.4)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t)
    (define-key company-active-map [tab] 'company-select-next))

;;    (require 'color)
;;    (let ((bg (face-attribute 'default :background)))
;;      (custom-set-faces
;;        `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
;;        `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
;;        `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
;;        `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
;;        `(company-tooltip-common ((t (:inherit font-lock-constant-face))))))

    ;; company-c-headers
    (use-package company-c-headers
      :ensure t)
    (add-to-list 'company-backends 'company-c-headers)

    (add-to-list 'company-c-headers-path-system "/Library/Developer/CommandLineTools/usr/include/c++/v1/")
    
    ;; config yasnippet
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))

    ;; C/C++ headers autocomplete
    (defun my:ac-c-header-init ()
      (require 'auto-complete-c-headers)
      (add-to-list 'ac-sources 'ac-source-c-headers)
      (add-to-list 'achead:include-directories '"/Library/Developer/CommandLineTools/usr/include
     /usr/include"))
    (add-hook 'c++-mode-hook 'my:ac-c-header-init)
    (add-hook 'c-mode-hook 'my:ac-c-header-init)

(use-package company-quickhelp
  :ensure t)
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp

  (use-package flycheck-irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'c-mode-hook 'flycheck-mode)
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
    (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
    (defun my-select-g++check-for-checker ()
      "Select g++-check for flycheck's checker."
      (flycheck-select-checker 'c/c++-gcc))

    (add-hook 'c-mode-hook #'my-select-g++check-for-checker)
    (add-hook 'c++-mode-hook #'my-select-g++check-for-checker))

  ;; Flycheck inline mode
  (use-package flycheck-inline
    :ensure t)
  (with-eval-after-load 'flycheck
    (flycheck-inline-mode))
  (use-package quick-peek
    :ensure t)

#+END_SRC

* Line numbers
#+BEGIN_SRC emacs-lisp

  ;; (use-package nlinum
  ;;   :ensure t
  ;;   :config (global-nlinum-mode 0))

  (global-display-line-numbers-mode)
  ;; (setq linum-format "%d ")

#+END_SRC

* IDO
#+BEGIN_SRC emacs-lisp

  (use-package ido
    :bind (("C-x b" . ido-switch-buffer))
    :init
    (defun my-ido-keys ()
      "Add keybindings for ido"
      (define-key ido-completion-map [tab] 'ido-next-match))
    (add-hook 'ido-setup-hook #'my-ido-keys)
    :config
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1))
  ;;  (use-package ido-complete-space-or-hyphen)

#+END_SRC

* regexp / autocompletion

#+BEGIN_SRC emacs-lisp

  ;; Setup smex, M-x auto completion
  (use-package smex
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))

  (use-package visual-regexp
    :ensure t)
  (use-package visual-regexp-steroids
    :ensure t
    :config
    (define-key global-map (kbd "C-c r") 'vr/replace)
    (define-key global-map (kbd "C-c q") 'vr/query-replace)
    ;; if you use multiple-cursors, this is for you:
    (define-key global-map (kbd "C-c m") 'vr/mc-mark)
    ;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
    ;; (define-key global-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
    ;; (define-key global-map (kbd "C-s") 'vr/isearch-forward)) ;; C-M-s
    )

  ;; Replace modeline
  (use-package spaceline-config
    :ensure spaceline
    :pin melpa-stable
    :config
    (spaceline-emacs-theme))

#+END_SRC

* Swiper / Ivy / Counsel
#+BEGIN_SRC emacs-lisp

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :config
      (ivy-mode -1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))
  
  (use-package counsel
    :ensure t
    :bind
      (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
        ("M-y" . ivy-next-line)))

  (use-package swiper
    :ensure t
    :bind (
      ("C-s" . swiper)
      ("C-r" . swiper))
      ;; ("C-c C-r" . ivy-resume)
      ;; ("M-x" . counsel-M-x)
      ;; ("C-x C-f" . counsel-find-file))
    :config
      (progn
        (ivy-mode -1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

#+END_SRC

* Side bar
#+BEGIN_SRC emacs-lisp

  (use-package treemacs-all-the-icons
    :ensure t)

  (use-package treemacs
    :ensure t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-;"       . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag))
    :config
    (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
    ;; (add-hook 'treemacs-mode-hook (lambda() (set-face-attribute 'default nil :font "Menlo")))
    (treemacs-resize-icons 22)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)

    (dolist (face '(treemacs-root-face
                    treemacs-git-unmodified-face
                    treemacs-git-modified-face
                    treemacs-git-renamed-face
                    treemacs-git-ignored-face
                    treemacs-git-untracked-face
                    treemacs-git-added-face
                    treemacs-git-conflict-face
                    treemacs-directory-face
                    treemacs-directory-collapsed-face
                    treemacs-file-face
                    treemacs-tags-face))
      (set-face-attribute face nil :family "Helvetica" :height 90))

    (treemacs-load-theme "all-the-icons"))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  ;; (use-package neotree
  ;;   :ensure t
  ;;   :config
  ;;   (global-set-key (kbd "C-;") 'neotree-toggle))
  ;; ;; File tree icons style
  ;; (setq neo-theme (if (display-graphic-p) 'icons 'arrow))

#+END_SRC

* Buffer resize
#+BEGIN_SRC emacs-lisp

  (defun halve-other-window-height ()
    "Expand current window to use quarter of the other window's lines."
    (interactive)
    (enlarge-window (/ (window-height (next-window)) 4)))

  (global-set-key (kbd "C-c v") 'halve-other-window-height)

#+END_SRC

* Tramp for remote file editing
#+BEGIN_SRC emacs-lisp

  ;; M-x commads
  (defun sudo ()
    "Use TRAMP to `sudo' the current buffer"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
               buffer-file-name))))

#+END_SRC
* Org mode
** org init config
#+BEGIN_SRC emacs-lisp

  (local-set-key "\M-\C-g" 'org-plot/gnuplot)

  (use-package org 
    :ensure t
    :pin org)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/Sync/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)  
    "Advise capture-finalize to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

  (defadvice org-capture-destroy 
      (after delete-capture-frame activate)  
    "Advise capture-destroy to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))  

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
     (org-capture)))

                                          ; (require 'ox-beamer)
                                          ; for inserting inactive dates
  (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))

  (use-package htmlize :ensure t)

  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

  #+END_SRC
** org code execution config
#+BEGIN_SRC emacs-lisp

  (use-package ob-elixir
    :ensure t)

  (org-babel-do-load-languages
  'org-babel-load-languages '(
    (C . t)
    (ruby . t)
    (elixir . t)
    (gnuplot . t)
    (org . t)))

#+END_SRC
* YAML mode
#+BEGIN_SRC emacs-lisp

  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

#+END_SRC
    
* iBuffer
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;; (add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

  (use-package git-timemachine
    :ensure t)

#+END_SRC

* C# Mode

#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
      :ensure t
      :config

      (add-hook 'csharp-mode-hook 'sm-csharp-mode-setup t))

  ;; (defun my-csharp-mode-setup ()
  ;;   (setq c-syntactic-indentation t)
  ;;   (c-set-style "k&r"))

  (defun sm-csharp-mode-setup ()
    (setq indent-tabs-mode nil)
    (setq c-syntactic-indentation t)
    (c-set-style "ellemtel")
    (setq c-basic-offset 4)
    (setq truncate-lines t)
    (setq tab-width 4)
    (setq evil-shift-width 4))

;;  (use-package omnisharp
;;      :ensure t
;;      :after company
;;      :config

;;      (add-hook 'csharp-mode-hook 'omnisharp-mode)
;;      (add-hook 'csharp-mode-hook 'c-set-style "k&r")
;;      (eval-after-load
;;      'company
;;      '(add-to-list 'company-backends 'company-omnisharp))

;;      (add-hook 'csharp-mode-hook #'company-mode)
;;      (add-hook 'csharp-mode-hook #'flycheck-mode))
      ;; (add-hook 'csharp-mode-hook 'my-csharp-mode-setup t))

#+END_SRC
* Web Mode
#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    :mode (("\\.js\\'" . web-mode)
           ("\\.jsx\\'" .  web-mode)
           ("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.html\\'" . web-mode))
    :commands web-mode)

  #+END_SRC

* TypeScript Mode
#+BEGIN_SRC emacs-lisp

  (use-package typescript-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode))
    (setq typescript-indent-level   2
      typescript-expr-indent-offset 2
      ))

#+END_SRC

* C Code Format
#+BEGIN_SRC emacs-lisp

  (c-add-style
    "csharp"
    '("k&r"))

  (setq c-default-style '((csharp-mode  . "k&r")))

#+END_SRC

* Pojectile

#+BEGIN_SRC emacs-lisp

  (use-package projectile
      :ensure t
      :config
    
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

      (projectile-mode)
    
      (setq projectile-enable-caching t)
      (setq projectile-indexing-method 'alien)
      (setq projectile-globally-ignored-file-suffixes
        '("#" "~" ".swp" ".o" ".so" ".exe" ".dll" ".elc" ".pyc" ".jar"))
      (setq projectile-globally-ignored-directories
        '(".git" "node_modules" "__pycache__" ".vs"))
      (setq projectile-globally-ignored-files '("TAGS" "tags" ".DS_Store"))
  )

#+END_SRC

* LSP Mode

#+BEGIN_SRC emacs-lisp

  (use-package lsp-mode
    :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((typescript-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration)
           (web-mode . lsp-deferred))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)

  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq gc-cons-threshold 100000000)

  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list)

#+END_SRC
